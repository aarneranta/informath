(; https://en.wikipedia.org/wiki/Algebra_of_sets ;)

commUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A B) (union B A)).
commIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (intersection B A)).

assocUnion : (A : Set) -> (B : Set) -> (C : Set) ->
  Proof (equalset (union (union A B) C) (union A (union B C))).
assocIntersection : (A : Set) -> (B : Set) -> (C : Set) ->
  Proof (equalset (intersection (intersection A B) C) (intersection A (intersection B C))).

distrUnion : (A : Set) -> (B : Set) -> (C : Set) ->
  Proof (equalset (union A (intersection B C)) (intersection (union A B) (union A C))).
distrIntersection : (A : Set) -> (B : Set) -> (C : Set) ->
  Proof (equalset (intersection A (union B C)) (union (intersection A B) (intersection A C))).

unionEmpty : (A : Set) -> Proof (equalset (union A emptyset) A).
intersEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset).

complEnion : (A : Set) -> Proof (equalset (union A (complement A)) universeset).
complIntersection : (A : Set) -> Proof (equalset (intersection A (complement A)) emptyset).

idemUnion : (A : Set) -> Proof (equalset (union A A) A).
idemIntersection : (A : Set) -> Proof (equalset (intersection A A) A).

dominUniverse : (A : Set) -> Proof (equalset (union A universeset) universeset).
dominEmpty : (A : Set) -> Proof (equalset (intersection A emptyset) emptyset).

absorbUnion : (A : Set) -> (B : Set) -> Proof (equalset (union A (intersection A B)) A).
absorbIntersection : (A : Set) -> (B : Set) -> Proof (equalset (intersection A (union A B)) A).

demorganUnion : (A : Set) -> (B : Set) ->
  Proof (equalset (complement (union A B)) (intersection (complement A) (complement B))).
demorganIntersection : (A : Set) -> (B : Set) ->
  Proof (equalset (complement (intersection A B)) (union (complement A) (complement B))).
involution : (A : Set) -> Proof (equalset (complement (complement A)) A).

intersectionAsDifference :  (A : Set) -> (B : Set) -> Proof (equalset (intersection A B) (difference A (difference A B))).

complEmpty : Proof (equalset (complement emptyset) universeset).
complUniverse : Proof (equalset (complement universeset) emptyset).

uniqComplement : (A : Set) -> (B : Set) -> Proof (equalset (union A B) universeset) ->
  Proof (equalset (intersection A B) emptyset) -> Proof (equalset B (complement A)).

reflSubset : (A : Set) -> Proof (subseteq A A).
antisymmSubset : (A : Set) -> (B : Set) -> Proof (iff (and (subseteq A B) (subseteq B A)) (equalset A B)).
transitSubset : (A : Set) -> (B : Set) -> (C : Set) -> Proof (if (and (subseteq A B) (subseteq B C)) (subseteq A C)).

prop7 : (S : Set) -> (A : Set) -> Proof (subseteq A S) -> Proof (and (subseteq emptyset A) (subseteq A S)).

prop8a : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (intersection A B) A)).
prop8b : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (union A B) B)).
prop8c : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (equalset (difference A B) emptyset)).
prop8d : (A : Set) -> (B : Set) -> Proof (iff (subseteq A B) (subseteq (complement B) (complement A)))
.

prop9d : (A : Set) -> (B : Set) -> (C : Set) ->
  Proof (and  
    (equalset (intersection (difference B A) C) (difference (intersection B C) (intersection A C)))
    (equalset (difference (intersection B C) (intersection A C)) (difference (intersection B C) A))
    ).
